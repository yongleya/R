data(package="vcd") # 列出包中包含的数据集
detach("package:vcd")
# 将一台计算机中的所有R包环境配置转移到另一台计算机
installed.packages()
# 将一台计算机中的所有R包环境配置转移到另一台计算机
installed.packages()[,1]
# 将一台计算机中的所有R包环境配置转移到另一台计算机
Rpackages <- installed.packages()[,1]
save(Rpackages, file='Rpackages.Rdata')
Rpack = load(file="Rpackages")
Rpack = load(file="Rpackages.Rdata")
Rpack
print(Rpack)
for (i in Rpack) {print(i)}
load("I:/R-Learning/Rpackages.Rdata")
Rpack <- load("I:/R-Learning/Rpackages.Rdata")
Rpack
help(plot)
?plot
args(plot)
# 使用R 帮助功能
# help.start()  打开帮助
# help(plot)  查看函数帮助
# ?plot   查看函数帮助
# args(plot)  查询函数参数
example(mean)
105/12
?mean
vignette()
# 使用R 帮助功能
# help.start()  打开帮助
# help(plot)  查看函数帮助
# ?plot   查看函数帮助
# args(plot)  查询函数参数
# example(mean)  函数 给出式例
# example(hist)  作图函数式例
# demo(graphics)  案例
# vignette("")  查看 别样的帮助pdf文档  （不是每个包都有）
??qplot
# 使用R 帮助功能
# help.start()  打开帮助
# help(plot)  查看函数帮助
# ?plot   查看函数帮助
# args(plot)  查询函数参数
# example(mean)  函数 给出式例
# example(hist)  作图函数式例
# demo(graphics)  案例
# vignette("")  查看 别样的帮助pdf文档  （不是每个包都有）
# ??qplot  搜索相关函数
help.search("heatmap")
??heatmap
# help.start()  打开帮助
# help(plot)  查看函数帮助
# ?plot   查看函数帮助
# args(plot)  查询函数参数
# example(mean)  函数 给出式例
# example(hist)  作图函数式例
# demo(graphics)  案例
# vignette("")  查看 别样的帮助pdf文档  （不是每个包都有）
# ??qplot  搜索相关函数
# help.search("heatmap") 与??搜索相同
apropos("sum")
# help(plot)  查看函数帮助
# ?plot   查看函数帮助
# args(plot)  查询函数参数
# example(mean)  函数 给出式例
# example(hist)  作图函数式例
# demo(graphics)  案例
# vignette("")  查看 别样的帮助pdf文档  （不是每个包都有）
# ??qplot  搜索相关函数
# help.search("heatmap") 与??搜索相同
# apropos("sum")  搜索所有包含sum关键字的内容
apropos("sum",mode = "function")
??ggplot
??stats
??datasets
??finance
# 内置数据集
??datasets
# 内置数据集
help("datasets")
# 内置数据集
help(packages="datasets")
# 内置数据集
help(package="datasets")
library(help="datasets")
data("rivers")
data
data("rivers")
rivers
state.x77
Titanic
help("datasets")
help(datasets)
help("HairEyeColor")
# 内置数据集
names(euro)
cars
data(cars)
cars
iris
heatmap(volcano)
crimetype
USArrests
HairEyeColor
crimtab
heatmap(crimtab)
cars
women
Orange
data(package=.packages(all.available = TRUE))
# 向量
x <- c(1,2,3,4,5)
x
print(x)
y <- c("one","two","three")
print(y)
x * y
z <- c(TRUE,F,T)
print(z)
c(1:100)
seq(1,100)
seq(from=1,to=100)
seq(from=1,to=100,by=2)
seq(from=1,to=100,by=2,length.out=10)
seq(from=1,to=100,by=2,length=10)
seq(from=1,to=100,length.out=10)
?rep
rep(2,3)
rep(x,5)
rep(x,each=5)
rep(x,each=5,times=2)
source("I:/R-Learning/R的学习.R", encoding = 'UTF-8', echo=TRUE)
a <- c(1,2,"one")
a
mode(a)
mode(z)
a.print
print(a)
mode(a)
mode(z)
a;x;y;z
a;x;y;z
a;x;y;z
a;x;y;z
a;x;y;z
a;x;y;z
x <- c(1,2,3,4,5)
y <- c(6,7,8,9,10)
x*2+y
z <- c(x,y)
z
z <- c(x,y)
z[z>4]
rep(x,c(2,3,1,4,2))
# 向量索引
x <- c(1:100)
# 向量索引
x <- c(1:100)
length(x)
x[1]
x[c(4:16)]
x[-2]
y <- c(1:10)
y[c(T,F,F,F,F,T,F,F,F,F,F)]
y[c(F)]
y[c(F,)]
y[c(F)]
y[c(T)]
y[c(T,F)]
y[c(T,F,F,F,F,T,F,F,F,F,F,T)]
y[c(T,F,F,F,F,T,F,F,F,F,F,F)]
y[y>5 & 与《9]
y[y>5 & y<9]
z <- c("one","two","three","Four")
print(x)
x[101] <- 101
x
a <- 1:3
a[4:6] <- 4:6
a
a[17] <- 5
a
append(a,9)
append(a,99,after=4)
b <- c(1,2,3,4)
b[3] <- 999
b
b[1:3] <- c(26,7,8)
b
# 向量运算
x <- 1:10
x
x+1
x <- x+1
x
y <- 4:13
x**y
x %>% y
x %% y
y %% x
y <- 4:13
y
x*y
y %/% x
y/x
x+y
y-x
x*y
y/x
y %% x
y %/% x
y==x
z <- c(1,2,3)
z %in% x
x!=y
# 内置计算函数
x <- c(-3,-2,-1,0,1,2,3)
abs(x)
log(x,base = 2)
log(16)
exp(x)
ceiling(3.2)
floor(2,3)
floor(2.3)
trunc(2.3)
round(3.1,4.7)
round(c(3.1,4.7),digits = 2)
round(c(3.1,4.7),digits = 1)
round(c(3.1,4.7),digits = 0)
round(c(3.142,4.327),digits = 2)
signif(c(3.212,4.534),digits = 2)
sin(x)
cos(x)
tan(x)
sun(x)
sum(x)
max(x)
min(x)
range(x)
mean(x)
var(x)
sd(x)
prod(x)
median(x)
quantile(x,c(0.1,0.4,0.7,0.9))
# which函数返回位置
y <- c(12,1,3,5,2)
which.max()
which.max(y)
which.min(y)
# 矩阵和数组
iris4
# 矩阵和数组
iris3
state.x77
x <- matrix(1:9,3,3)
x
x <- matrix(1:20,4,5)
x
x <- matrix(1:20,4,5,byrow = T)
x
matrix(1:10,2)
rownames(x) <- c("r1","r2","r3","r4")
x
rname <- c("r1","r2","r3","r4")
rownames(x) <- rname
x
cname <- c("C1","C2","C3","C4","C5")
colnames(x) <- cname
x
dimnames(x) <- list(rname,cname)
x
??dim
y <- 1:12
y
dim(y)
dim(y) <- 4:5
dim(y) <- c(4,5)
dim(y) <- c(4,5)
dim(y) <- 3,4
dim(y) <- (3,4)
dim(y)
dim(y) <- c(3,4)
y
x <- 1:20
dim(x) <- c(2,2,5)
x
?array
Titanic
dim1 <- c("A1","A2")
dim2 <- c("B1","B2","B3")
dim3 <- c("C1","C2","C3","C4")
x <- array(1:24,dimnames = list(dim1,dim2,dim3))
x <- array(1:24,dim = c(2,3,4), dimnames = list(dim1,dim2,dim3))
x <- array(1:24,dim = c(2,3,4), dimnames = list(dim1,dim2,dim3))
x
x.head
head(x)
head(x,2)
# 矩阵索引
m <- matrix(1:20,c(4,5),dimnames = list(rname,cname))
x
xm
m
m[1,]
m[,2]
m[-1,2]
m[1:3,2:4]
m["r2","C3"]
state.x77
state.x77["Alabama",]
# 矩阵运算
m*2
m+m
m**2
m/2
m-1
m+1
m*m
n <- matrix(1:9,3,3)
t <- matrix(2:10,3,3)
n%*%t
diag(n)
t(t)
# 列表
state.center
a <- 1:20
b <- matrix(1:20,4,5)
c <- mtcars
d <- "This is a list"
l <- list(a,b,c,d)
l
l[1]
l[1][1]
l[1][1][1]
l[c(1,2)]
l$1
l[[1]]
l[[1]][1]
mlist <- list(a,b,c,d)
class(mlist)
class(mlist[1])
class(mlist[[1]])
class(mlist[[1]][1])
mlist[[2]][2,3]
mlist[[5]] <- iris
mlist
mlist[[5]] <- NULL
mlist
# 数据框
c1 <- c(1,2,3,4)
c2 <- c(2,3,4,5)
data.frame(c1,c2)
data.frame(c1,c2)['c1']
data.frame(c1,c2)[1]
data.frame(c1,c2)[1,]
data.frame(c1,c2)[,1]
data.frame(c1,c2)[,c("c1","c2")]
c3 <- c(3,4,5,6)
df <- data.frame(c1,c2,c3)
df
# 数据框
df <- state.x77
df
# 索引
df[1]
# 索引
df[1,1]
# 索引
df[,1]
# 索引
df[,1:2]
df["Alabama",]
df[1,3]
df[1,]
df['Alabama']
df['Alabama',]
df$Income
df$Alabama
state
state.abb
state[,state.abb]
require(state)
data(state)
state[,state.abb]
state <- data.frame(state.name,state.abb,state.region, state.x77)
state
state[c(2,4)]
state$Murder
state$state.name
women
plot(women.weight,women.height)
plot(women$weight,women$height)
plot(women$weight,women$height)
lm (weight ~height, data = women)
?attach
attach(mtcars)  # attach数据框之后可以只用列名  不用$符号
mtcars
mpg
cyl
hp
with(mtcars,{mpg})
sum(mtcars$cyl)
# 1、名义型变量  2、有序型变量  3、连续型变量
# 因子
# 1、名义型变量  2、有序型变量  3、连续型变量f
mtcars
mtcars.name
mtcars.names
class mtcars
class(mtcars)
class(mtcars)
class(ntcars.name)
# 因子
# 1、名义型变量  2、有序型变量  3、连续型变量f
??mtcars
# 因子
# 1、名义型变量  2、有序型变量  3、连续型变量f
?mtcars
class(mtcars$cyl)
mtcars$cyl
table(mtcars$cyl)
table(mtcars$am)
f <- factor(c("red","red","green","blue"))
class(f)
f
week <- factor("Mon","Tue","Wen","Thu","Fri","Sat","Sun")
week <- factor(c("Mon","Tue","Wen","Thu","Fri","Sat","Sun"))
week <- factor(c("Mon","Tue","Wen","Thu","Fri","Sat","Sun"),ordered = T,levels = c("Mon","Tue","Wen","Thu","Fri","Sat","Sun"))
week
fcyl <- factor(mtcars$cyl)
fcyl
plot(fcyl)
plot(mtcars$cyl)
plot(fcyl)   # 因子输出条形图
num <- 1:100
cut (num,c(seq(0,100,10)))
cnum <- cut (num,c(seq(0,100,10)))
plot(cnum)
state.division
state.region
# 缺失值处理
# NA 是缺失值
1+NA
a <- c(NA,1:29)
sum(a)
mean(a)
sum(a,na.rm = T)
mean(a,na.rm = T)
is.na(a)
require(VIM)
require("VIM")
install.packages("VIM")
require("VIM")
is.na(sleep)
?na.omit
na.omit(sleep)
# NaN 不可能的值 不存在的值
# inf 是存在的  无穷大或者无穷小
is.nan(1/0)
is.nan(0/0)
is.infinite(1/0)
# 字符串处理
nchar('hello world')
# 字符串处理
nchar('hello world')  # 字符串长度
"hello world".length
month.name
nchar(month.name)
length(month.name)
nchar(c(1,2,112,42112))
paste(c("Everybody","loves","stats"))
paste("Everybody","loves","stats")
paste("Everybody","loves","stats",sep = '-')
name <- c("Joy","Mary","Phylips")
paste(name,"loves","stats")
paste(name,c("loves","hates"),"stats")  # 向量与字符串同时使用paste会分别处理
substr(x=Month.name)
substr(x=month.name)
substr(x=month.name,start=1,stop=3)
week
weekdays.Date()
weekdays
rm(week)
week
mon <- substr(x=month.name,start=1,stop=3)
toupper()
toupper(mon)
tolower(mon)
？sub
?sub
?gsub
gsub("^(\\w)","\\U\\1",mon)
gsub("^(\\w)","\\U\\1",mon,perl = T)
x <- c("b","A+","AC")
?grep
grep("A+",x,fixed = T)
grep("A+",x,fixed = T)  # 在x中找字符“A+”的位置（不支持正则）
grep("A+",x,fixed = F)
grep("A+",x,fixed = F)  # 在x中找字符“A+”的位置（支持正则）
strsplit(x)
grep("A+",x,fixed = F)  # 在x中找字符“A+”的位置（支持正则）
path <- "C://user/administrator/desktop"
strsplit(path,"/")
strsplit(c(path,path),"/")
?outer
x <- 1:13
suit <- c("spades","clubs","hearts","diamonds")
outer(suit,x,FUN = paste)
outer(suit,x,FUN = paste)  #  生成一个笛卡尔集合 sep指定连接集合
outer(suit,x,FUN = paste,sep='-')  #  生成一个笛卡尔集合 sep指定连接集合
